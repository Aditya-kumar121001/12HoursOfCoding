//Sliding Window technique is used to convert nested loops to single loop
//How to indetify => Opertaion -> sub array/sub string -> condition

1.Maximum Average subarray 
double findMaxAverage(vector<int>& nums, int k) {
        double maxAvg = INT_MIN;
        double currsum=0;
        for(int i=0; i<k; i++){
            currsum += nums[i];
        }
        maxAvg = max(maxAvg, currsum/k);
        
        for(int i=k; i<nums.size(); i++){
            currsum -= nums[i-k];
            currsum += nums[i];
            maxAvg = max(maxAvg, currsum/k);
        }
        return maxAvg;
    }

2. Max sum subarray of size k
//calculate sum from Arr[0] to k to fix the window size then maintain the window size to K and obtain the maximum subarray
int maximumSumSubarray(int K, vector<int> &Arr , int N){
        int i=0,j=0;
        int maximum=INT_MIN;
        
        int sum=0;
        while(j<N){
            sum = sum+Arr[j];
            if(j-i+1 < K){
                j++;
            }
            else if(j-i+1 == K){
                maximum = max(maximum,sum);
                sum = sum-Arr[i];
                i++;
                j++;
            }
        }
        return maximum;
    }

3. First negative integer in every window of size K
//Push all the negative numbers into the queue untill we hit the window size
//once window size is acheived, maintain the window size and put the first element of the queue to the ans vector and if the size of the queue is 0 push 0 in the 
  ans vector
//sliding the window and pop first element from the queue to avoid repetative work
vector<long long> printFirstNegativeInteger(long long int A[], long long int N, long long int K) {
    queue<long long> q;
    vector<long long> ans;
    long long i = 0,j = 0;
    
    while(j<N){
        if(A[j]<0)
            q.push(A[j]);
        if(j-i+1 < K){
            j++;
        }
        else{
            if(q.empty()) ans.push_back(0);
            else{
                ans.push_back(q.front());
                if(q.front() == A[i])
                    q.pop();
            }
            i++;j++;
        }
    }
    return ans;
}

4.Count Occurences of Anagrams
//Create a map and store the occurence of each character in string and a count=map.size() variable to prevent the map traversal and window size equal to p.size()
//if arr[j] is present in str reduce the count of that variable in the map oncethe count of any variable is 0 reduce the count
//if count ==0 increment the answer
//now slide the window by increment of arr[i] and i++,j++
int search(string p, string s){
    int i=0,j=0;
    int k=p.size();
    unordered_map<char, int> mp;
    int ans = 0;
        
    for (auto &x : p){
         mp[x]++;
    }
        
    int count = mp.size();
        
	while(j < s.size()){
	    if (mp.find(s[j]) != mp.end()){
            mp[s[j]]--;
            if (mp[s[j]] == 0){
                count--;
            }
        }
        if (j-i+1 < k) j++;

        else if (j-i+1 == k){
            if (count == 0){
                ans++;
            }
            if (mp.find(s[i]) != mp.end()){
                mp[s[i]]++;
                if (mp[s[i]] == 1){
                    count++;
                }
            }
            i++;
            j++;
        }
    }
    return ans;
}
